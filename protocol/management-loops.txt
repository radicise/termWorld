used to remotely configure Host and Auth servers

NOTE: it will not be specified to have permission levels and different implementations may handle this differently

Client -> Server: 0x01
Server -> Client: <public key length> + <public key>
Client -> Server: <encrypted length> + encrypt ( <password> )
ON FAILURE {
    Server -> Client: 0x55
    <disconnection>
}
ON SUCCESS {
    Server -> Client: 0x63
}
Client -> Server: <public key length> + <client public key>
Server -> Client: <encrypted length> + encrypt ( <symmetric key> )

BELOW HAPPENS IN LOOP - ALL COMMUNICATION IS ENCRYPTED USING THE SYMMETRIC ENCRYPTION PROTOCOL:

Client -> Server: <opid>

COMMON {
    if (opid == 0x00) {
        <disconnection>
    }
    // update policy
    if (opid == 0x01) {
        Client -> Server: <policy id> see "policies" for more
        Server -> Client: 0x63 if policy exists else 0x55
        Client -> Server: 0x01 for "GET" 0x02 for "SET"
        if "GET" {
            Server -> Client : <policy type>
            Server -> Client : <policy value>
        }
        if "SET" {
            Client -> Server {
                if policy is boolean : 0x01 = false, 0x02 = true
                if policy is number : 4 byte signed number
                if policy is string : <string length in bytes> + <string>
            }
            Server -> Client: 0x63 for success, 0x55 for failure
        }
    }
    if (opid == 0x03) {
        execute ( <fetch-policies> )
    }
}

FOR HOSTS {
    if (opid == 0x02) {
        execute ( <server-secret-update-protocol> )
        if success {
            Host -> Client: 0x63
        } else {
            Host -> Client: 0x55
        }
        Host -> Client: <number succeeded> + <number failed> (numbers are 2 byte signed ints)
    }
    if (opid == 0x04) {
        execute ( <host-shutdown> )
    }
}

FOR AUTHS {
    // allows invalidating or renaming accounts that have the same name
    if (opid == 0x02) {
        Auth -> Client: 0x63 if <require-unique-names> is enabled, 0x55 otherwise ON 0x55 THE OPERATION IS TERMINATED
        Auth -> Client: <number of accounts that need to be resolved> (4 bytes) NOTE: this is the number of DUPLICATES, the first accounts found with a name shouldn't be counted or sent to be resolved
        for (account in to_resolve) {
            Auth -> Client: <account id> + <account name>
            while (new_name == old_name) {
                Client -> Auth: <new account name>
                Auth -> Client: 0x63 on success, 0x55 if <new name> is the same as the old name
            }
        }
    }
}

fetch-policies:
Server -> Client: <2-byte unsigned integer> number of policies being sent
FOR EACH POLICY {
    Server -> Client: <policy id>
    Server -> Client: <4-byte int> length of policy name
    Server -> Client: <policy name>
    Server -> Client: <policy type>
    Server -> Client: <policy value> (see opid 0x01 in management loops for info on how to send policy values)
}
<END PROTOCOL>

policies:

types: 0x01 for boolean, 0x02 for 32-bit signed integer, 0x03 for string, 0x04 for types that can't be serialized

Host policies {
    0 allow-no-authentication-servers - boolean - when true, allows players to join without authenticating if the server has no authentication server. when false authentication fails automatically

    1 max-player-count - number - maximum number of players allowed to be in the server at a given time
}

Auth policies {
    0 require-unique-names : boolean - sets if the authentication server should require all accounts to have unique names NOTE: setting this should not invalidate already existing accounts
}