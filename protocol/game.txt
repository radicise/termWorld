Definitions:
long: Signed 8-byte big-endian integer
int: Signed 4-byte big-endian integer
short: Signed 2-byte big-endian integer
char: Unsigned 2-byte integer, is the Unicode value of a character which lies within Basic Multilingual Plane
byte: Octet
X-coordinate: amount of tiles right starting from 0 at leftmost
Y-coordinate, amount of tiles down starting from 0 at topmost

Hpasswords are hashes of the accountID and account password where password is before id

colorID = (data >>> 6) & 0xf


Icon defaults:
Dogs start with u+0064 or equivalent as the starting icon
Players start with u+263a or equivalent as the starting icon
Plain entities start with u+203c or equivalent as the starting icon

Default Host Server Port = 15651
Default Auth Server Port = 15652

Game protocol:

Login opID:
Client -> Host: 0x63

Auth:

Client -> Host: <username>
Host -> Client: <nonce0> + <serverID>
Client -> Auth: 0x63 + <userID>
Auth -> Client: 0x63 for acceptance, 0x55 for rejection due to userID not existing at the authentication server
Auth -> Client: <nonce1>
Client -> Auth: <serverID> + <nonce0> + hash(<Hpassword> + <nonce1> + <userID>)
Auth -> Client: 0x63 for acceptance, 0x55 for rejection due to the player's secret key not being verified
Auth -> Client: 0x63 for acceptance, 0x55 for rejection due to the target server not being registered with the authentication server
Auth -> Client: hash(<username> + <nonce0> + <server>.<currentSecret> + <userID>)
Client -> Host: <username> + <userid> + <the hash that the server gave>
Host -> Client: 0x63 for acceptance, 0x55 for rejection

After auth:
H -> C
int, host's version ID

C -> S
int, client's version ID

S -> H
byte, signifies if the server will accept the player. 0x63 is acceptance, 0x55 is rejection; if rejected, an int value containing the length of the rejection message in bytes is sent and then followed by the message itself, text in big-endian UTF-16; rejected players must then disconnect

S -> H
The serialized level data;
Serialized level data format:
        int, version ID
        int, level width, in tiles
        int, level height, in tiles
        int, maximum possible amount of entities
        byte values of tile IDs for the level, each tile ID is 1 byte, length is width * height, order is left-to-right for each line, lines top-to-bottom
        long, level age, in animation frames
        int, player spawn X-coordinate
        int, player spawn Y-coordinate
        int, amount of serialized entities, followed by the serialized data for each entity
        Serialized entity data format:
                byte, entity type; 0 = Entity, 1 = Dog, 2 = EntityPlayer, 3 = EntityItem
                IF IT IS AN EntityPlayer:
                        int, inventory size
                        for each inventory slot, the serialized data for the Item is provided, in order from slot 1 to the highest slot;
                        Serialized item data format:
                                byte, quantity, if this is 0xff then the quantity is considered zero; IF THIS IS 0x00 THEN THE Item IS NULL AND NO MORE READING IS PERFORMED
                                byte, thingID; 0 = cloth patch, 1 = water bottle, 2 = stone
                int, X-coordinate
                int, Y-coordinate
                IF IT IS AN EntityItem:
                        Serialized item data
                long, raw data available to the entity
                short, health amount
short, animation interval time in milliseconds
int, the client's matching EntityPlayer's X-coordinate
int, the client's matching EntityPlayer's Y-coordinate
byte, 0x06
serialized entity data for the client's matching EntityPlayer

The protocol then defines the 2 different communication loops, which continue through the remainder of the client's connection:

H -> C
(pseudo-code)
[byte fID]//function ID
if (fID == 2) {
        //animation frame has finished, render the level
}
else if ((fID & 2) == 0) {//entity update
        [int xPos]//entity's X-coordinate
        [int yPos]//entity's Y-coordinate
        if ((fID & 1) == 1) {//entity icon update
                [char face]//entity's new icon
        }
        if ((fID & 4 == 4) {//entity movement
                [int newX]//entity's new X-coordinate
                [int newY]//entity's new Y-coordinate
        }
        if ((fID & 8) == 8) {//entity health update
                [short health]//entity's new health
        }
        if ((fID & 16) == 16) {//inventory slot update
                [int invSlot]//inventory slot number, zero-indexed
                [byte-sequence item]//serialized item data for the new item at the index
        }
}
else {
        switch (fID) {
                case (3)://disconnection
                        [int msgSize]
                        [byte-sequence size=msgSize msg]//disconnection message, UTF-16BE
                        break;
                case (6)://new entity
                        [byte-sequence entityData]//serialized entity data
                        break;
                case (7)://remove entity
                        break;
                case (10)://tile change
                        [int tileNum]//which tile, represented by its serialized numeric position (tilePos = [int(tileNum / levelWidth), tileNum % levelWidth])
                        [byte tileID]//new value
        }
}
C -> H
Each action is represented by a different byte sent to the server
Forward-cycle tile under client's watching EntityPlayer: 0x64
Destroy tile under client's matching EntityPlayer: 0x65
Backward-cycle tile under client's watching EntityPlayer: 0x64



Auth Server Password Exchange:

lengths are 2 byte unsigned ints

see "protocol-symmetric-encryption.txt" for details on symmetric encryption 

AuthClient -> Auth: 0x32
Auth -> AuthClient: <public key length>
Auth -> AuthClient: <auth public key>
AuthClient -> Auth: <encrypted message length> + <client public key length> + encrypt(<password>) + <client public key>
Auth -> AuthClient: 0x55 on invalid password, <random byte != 0x55> on success
IF rejected: auth disconnects
Auth -> AuthClient: <encrypted symmetric key length>
Auth -> AuthClient: encrypt(<symmetric session key>)

LOOP {
        ALL COMMUNICATIONS ENCRYPTED WITH SESSION KEY
        Client -> Auth: <operation id>
        (id === 0x00) {
                CONNECTION TERMINATION
        }
        (id === 0x01) { // register new account
                Client -> Auth: <username> + <userid> + <account password>
                Auth -> Client: 0x01 if user id is taken, 0x02 if username is taken and auth policy "unique usernames" is true, 0x03 on success
        }
        (<unrecognized id>) {
                Auth -> Client: 0xff
        }
}
